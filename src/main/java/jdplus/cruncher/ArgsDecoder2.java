/*
 * Copyright 2018 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package jdplus.cruncher;

import demetra.sa.EstimationPolicyType;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.Callable;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import picocli.CommandLine;
import picocli.jansi.graalvm.AnsiConsole;

/**
 *
 * @author Philippe Charles
 */
@CommandLine.Command(
        name = "jwsacruncher",
        description = {
            "JWSACruncher is a console tool that re-estimates all the multi-processing defined in a workspace. "
            + "The workspace may have been generated by means of Demetra+ (.NET), of JDemetra+ (Java) or by any user tool.",
            "Note that calling this tool without any parameter generates a default config file in the user dir."
        },
        sortOptions = false,
        descriptionHeading = "%n",
        parameterListHeading = "%nParameters:%n",
        optionListHeading = "%nOptions:%n",
        commandListHeading = "%nCommands:%n",
        headerHeading = "%n",
        mixinStandardHelpOptions = true
)
final class ArgsDecoder2 implements Callable<Args> {

    @CommandLine.Parameters(
            description = "Workspace file."
    )
    private File workspace;

    @CommandLine.Option(
            names = {"-x", "-X"},
            paramLabel = "<config>",
            description = "Config file."
    )
    private File configFile = null;

    @CommandLine.Option(
            names = {"-d"},
            paramLabel = "<output>",
            description = "Output folder. [workspace]/Output by default."
    )
    private String output = null;

    @CommandLine.Option(
            names = {"-m"},
            paramLabel = "<matrix>",
            description = "File that contains the items of the matrix output."
    )
    private File matrixFile = null;

    @CommandLine.Option(
            names = {"-p"},
            paramLabel = "<policy>",
            description = "Refreshing policy of the processing."
    )
    private String policy = null;

    @CommandLine.Option(
            names = {"-f"},
            paramLabel = "<layout>",
            description = "Layout of the csv files: list (default), htable, vtable."
    )
    private String layout = null;

    @Override
    public Args call() throws Exception {
        WsaConfig config = configFile != null ? WsaConfig.read(configFile) : new WsaConfig();
        if (output != null) {
            config.Output = output;
        }
        if (matrixFile != null) {
            config.Matrix = readMatrixConfig(matrixFile);
        }
        if (policy != null) {
            config.policy = policy;
            if (config.getPolicy() == EstimationPolicyType.None) {
                throw new IllegalArgumentException("Invalid policy arg");
            }
        }
        if (layout != null) {
            config.layout = layout;
        }
        return Args.of(workspace, config);
    }

    private static String[] readMatrixConfig(File file) throws IOException {
        return Files.readAllLines(file.toPath()).toArray(new String[0]);
    }

    @Nullable
    public static Args decode(@NonNull String... args) {
        try (AnsiConsole ansi = AnsiConsole.windowsInstall()) {
            return CommandLine.call(new ArgsDecoder2(), args);
        }
    }
}
